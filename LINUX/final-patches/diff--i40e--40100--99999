diff --git a/i40e/i40e_main.c b/i40e/i40e_main.c
index 5b5bea1..af8da90 100644
--- a/i40e/i40e_main.c
+++ b/i40e/i40e_main.c
@@ -91,6 +91,11 @@ MODULE_DESCRIPTION("Intel(R) Ethernet Connection XL710 Network Driver");
 MODULE_LICENSE("GPL");
 MODULE_VERSION(DRV_VERSION);
 
+#if defined(CONFIG_NETMAP) || defined(CONFIG_NETMAP_MODULE)
+#define NETMAP_I40E_MAIN
+#include <i40e_netmap_linux.h>
+#endif
+
 /**
  * i40e_allocate_dma_mem_d - OS specific memory alloc for shared code
  * @hw:   pointer to the HW structure
@@ -2527,6 +2532,10 @@ static int i40e_configure_tx_ring(struct i40e_ring *ring)
 	/* cache tail off for easier writes later */
 	ring->tail = hw->hw_addr + I40E_QTX_TAIL(pf_q);
 
+#ifdef DEV_NETMAP
+	i40e_netmap_configure_tx_ring(ring);
+#endif /* DEV_NETMAP */
+
 	return 0;
 }
 
@@ -2614,6 +2623,11 @@ static int i40e_configure_rx_ring(struct i40e_ring *ring)
 	ring->tail = hw->hw_addr + I40E_QRX_TAIL(pf_q);
 	writel(0, ring->tail);
 
+#ifdef DEV_NETMAP
+	if (i40e_netmap_configure_rx_ring(ring))
+		return 0;
+#endif /* DEV_NETMAP */
+
 	if (ring_is_ps_enabled(ring)) {
 		i40e_alloc_rx_headers(ring);
 		i40e_alloc_rx_buffers_ps(ring, I40E_DESC_UNUSED(ring));
@@ -4717,6 +4731,11 @@ static int i40e_up_complete(struct i40e_vsi *vsi)
 	i40e_napi_enable_all(vsi);
 	i40e_vsi_enable_irq(vsi);
 
+#ifdef DEV_NETMAP
+	if (vsi->netdev)
+		netmap_enable_all_rings(vsi->netdev);
+#endif /* DEV_NETMAP */
+
 	if ((pf->hw.phy.link_info.link_info & I40E_AQ_LINK_UP) &&
 	    (vsi->netdev)) {
 		i40e_print_link_message(vsi, true);
@@ -4809,6 +4828,11 @@ void i40e_down(struct i40e_vsi *vsi)
 	i40e_vsi_control_rings(vsi, false);
 	i40e_napi_disable_all(vsi);
 
+#ifdef DEV_NETMAP
+	if (vsi->netdev)
+		netmap_disable_all_rings(vsi->netdev);
+#endif /* DEV_NETMAP */
+
 	for (i = 0; i < vsi->num_queue_pairs; i++) {
 		i40e_clean_tx_ring(vsi->tx_rings[i]);
 		i40e_clean_rx_ring(vsi->rx_rings[i]);
@@ -8515,6 +8539,11 @@ int i40e_vsi_release(struct i40e_vsi *vsi)
 		return -ENODEV;
 	}
 
+#ifdef DEV_NETMAP
+	if (vsi->netdev_registered)
+		netmap_detach(vsi->netdev);
+#endif
+
 	uplink_seid = vsi->uplink_seid;
 	if (vsi->type != I40E_VSI_SRIOV) {
 		if (vsi->netdev_registered) {
@@ -8850,6 +8879,11 @@ struct i40e_vsi *i40e_vsi_setup(struct i40e_pf *pf, u8 type,
 		break;
 	}
 
+#ifdef DEV_NETMAP
+	if (vsi->netdev_registered)
+		i40e_netmap_attach(vsi);
+#endif
+
 	return vsi;
 
 err_rings:
diff --git a/i40e/i40e_txrx.c b/i40e/i40e_txrx.c
index 9d95042d..44206e7 100644
--- a/i40e/i40e_txrx.c
+++ b/i40e/i40e_txrx.c
@@ -29,6 +29,10 @@
 #include "i40e.h"
 #include "i40e_prototype.h"
 
+#if defined(CONFIG_NETMAP) || defined (CONFIG_NETMAP_MODULE)
+#include <i40e_netmap_linux.h>
+#endif /* DEV_NETMAP */
+
 static inline __le64 build_ctob(u32 td_cmd, u32 td_offset, unsigned int size,
 				u32 td_tag)
 {
@@ -698,6 +702,11 @@ static bool i40e_clean_tx_irq(struct i40e_ring *tx_ring, int budget)
 	unsigned int total_packets = 0;
 	unsigned int total_bytes = 0;
 
+#ifdef DEV_NETMAP
+	if (tx_ring->netdev && netmap_tx_irq(tx_ring->netdev, tx_ring->queue_index))
+		return true;
+#endif /* DEV_NETMAP */
+
 	tx_buf = &tx_ring->tx_bi[i];
 	tx_desc = I40E_TX_DESC(tx_ring, i);
 	i -= tx_ring->count;
@@ -1528,6 +1537,13 @@ static int i40e_clean_rx_irq_ps(struct i40e_ring *rx_ring, int budget)
 	u8 rx_ptype;
 	u64 qword;
 
+#ifdef DEV_NETMAP
+	int dummy;
+	if (rx_ring->netdev &&
+	    netmap_rx_irq(rx_ring->netdev, rx_ring->queue_index, &dummy))
+		return 1;
+#endif /* DEV_NETMAP */
+
 	if (budget <= 0)
 		return 0;
 
